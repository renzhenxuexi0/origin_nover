// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/model/book_source.dart';
import 'api/parse_book_source.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.37';

  @override
  int get rustContentHash => -2039966169;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_origin_novel',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<List<BookSource>> crateApiParseBookSourceParseBookSourceFromUrl(
      {required String url});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ReqwestError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ReqwestError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ReqwestErrorPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<List<BookSource>> crateApiParseBookSourceParseBookSourceFromUrl(
      {required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_book_source,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerreqwestError,
      ),
      constMeta: kCrateApiParseBookSourceParseBookSourceFromUrlConstMeta,
      argValues: [url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiParseBookSourceParseBookSourceFromUrlConstMeta =>
      const TaskConstMeta(
        debugName: "parse_book_source_from_url",
        argNames: ["url"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ReqwestError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerreqwestError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ReqwestError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerreqwestError;

  @protected
  ReqwestError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerreqwestError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReqwestError.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReqwestError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerreqwestError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReqwestError.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BookSource dco_decode_book_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 20)
      throw Exception('unexpected arr length: expect 20 but see ${arr.length}');
    return BookSource(
      bookSourceComment: dco_decode_opt_String(arr[0]),
      bookSourceGroup: dco_decode_opt_String(arr[1]),
      bookSourceName: dco_decode_opt_String(arr[2]),
      bookSourceType: dco_decode_opt_box_autoadd_i_64(arr[3]),
      bookSourceUrl: dco_decode_opt_String(arr[4]),
      customOrder: dco_decode_opt_box_autoadd_i_64(arr[5]),
      enabled: dco_decode_opt_box_autoadd_bool(arr[6]),
      enabledCookieJar: dco_decode_opt_box_autoadd_bool(arr[7]),
      enabledExplore: dco_decode_opt_box_autoadd_bool(arr[8]),
      exploreUrl: dco_decode_opt_String(arr[9]),
      lastUpdateTime: dco_decode_opt_box_autoadd_i_64(arr[10]),
      respondTime: dco_decode_opt_box_autoadd_i_64(arr[11]),
      ruleBookInfo: dco_decode_opt_box_autoadd_rule_book_info(arr[12]),
      ruleContent: dco_decode_opt_box_autoadd_rule_content(arr[13]),
      ruleExplore: dco_decode_opt_box_autoadd_rule_explore(arr[14]),
      ruleReview: dco_decode_opt_box_autoadd_rule_review(arr[15]),
      ruleSearch: dco_decode_opt_box_autoadd_rule_search(arr[16]),
      ruleToc: dco_decode_opt_box_autoadd_rule_toc(arr[17]),
      searchUrl: dco_decode_opt_String(arr[18]),
      weight: dco_decode_opt_box_autoadd_i_64(arr[19]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  RuleBookInfo dco_decode_box_autoadd_rule_book_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_rule_book_info(raw);
  }

  @protected
  RuleContent dco_decode_box_autoadd_rule_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_rule_content(raw);
  }

  @protected
  RuleExplore dco_decode_box_autoadd_rule_explore(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_rule_explore(raw);
  }

  @protected
  RuleReview dco_decode_box_autoadd_rule_review(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_rule_review(raw);
  }

  @protected
  RuleSearch dco_decode_box_autoadd_rule_search(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_rule_search(raw);
  }

  @protected
  RuleToc dco_decode_box_autoadd_rule_toc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_rule_toc(raw);
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<BookSource> dco_decode_list_book_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_book_source).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  RuleBookInfo? dco_decode_opt_box_autoadd_rule_book_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_rule_book_info(raw);
  }

  @protected
  RuleContent? dco_decode_opt_box_autoadd_rule_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_rule_content(raw);
  }

  @protected
  RuleExplore? dco_decode_opt_box_autoadd_rule_explore(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_rule_explore(raw);
  }

  @protected
  RuleReview? dco_decode_opt_box_autoadd_rule_review(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_rule_review(raw);
  }

  @protected
  RuleSearch? dco_decode_opt_box_autoadd_rule_search(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_rule_search(raw);
  }

  @protected
  RuleToc? dco_decode_opt_box_autoadd_rule_toc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_rule_toc(raw);
  }

  @protected
  RuleBookInfo dco_decode_rule_book_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return RuleBookInfo(
      author: dco_decode_opt_String(arr[0]),
      coverUrl: dco_decode_opt_String(arr[1]),
      init: dco_decode_opt_String(arr[2]),
      intro: dco_decode_opt_String(arr[3]),
      kind: dco_decode_opt_String(arr[4]),
      lastChapter: dco_decode_opt_String(arr[5]),
      name: dco_decode_opt_String(arr[6]),
      tocUrl: dco_decode_opt_String(arr[7]),
      wordCount: dco_decode_opt_String(arr[8]),
      downloadUrl: dco_decode_opt_String(arr[9]),
      canReName: dco_decode_opt_String(arr[10]),
    );
  }

  @protected
  RuleContent dco_decode_rule_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return RuleContent(
      content: dco_decode_opt_String(arr[0]),
      replaceRegex: dco_decode_opt_String(arr[1]),
      title: dco_decode_opt_String(arr[2]),
      nextContentUrl: dco_decode_opt_String(arr[3]),
      webJs: dco_decode_opt_String(arr[4]),
      sourceRegex: dco_decode_opt_String(arr[5]),
      imageStyle: dco_decode_opt_String(arr[6]),
      payAction: dco_decode_opt_String(arr[7]),
    );
  }

  @protected
  RuleExplore dco_decode_rule_explore(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return RuleExplore(
      author: dco_decode_opt_String(arr[0]),
      bookList: dco_decode_opt_String(arr[1]),
      bookUrl: dco_decode_opt_String(arr[2]),
      coverUrl: dco_decode_opt_String(arr[3]),
      lastChapter: dco_decode_opt_String(arr[4]),
      intro: dco_decode_opt_String(arr[5]),
      name: dco_decode_opt_String(arr[6]),
      wordCount: dco_decode_opt_String(arr[7]),
      kind: dco_decode_opt_String(arr[8]),
    );
  }

  @protected
  RuleReview dco_decode_rule_review(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return RuleReview(
      reviewUrl: dco_decode_opt_String(arr[0]),
      avatarRule: dco_decode_opt_String(arr[1]),
      contentRule: dco_decode_opt_String(arr[2]),
      postTimeRule: dco_decode_opt_String(arr[3]),
      reviewQuoteUrl: dco_decode_opt_String(arr[4]),
      voteUpUrl: dco_decode_opt_String(arr[5]),
      voteDownUrl: dco_decode_opt_String(arr[6]),
      postReviewUrl: dco_decode_opt_String(arr[7]),
      postQuoteUrl: dco_decode_opt_String(arr[8]),
      deleteUrl: dco_decode_opt_String(arr[9]),
    );
  }

  @protected
  RuleSearch dco_decode_rule_search(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return RuleSearch(
      author: dco_decode_opt_String(arr[0]),
      bookList: dco_decode_opt_String(arr[1]),
      bookUrl: dco_decode_opt_String(arr[2]),
      coverUrl: dco_decode_opt_String(arr[3]),
      intro: dco_decode_opt_String(arr[4]),
      name: dco_decode_opt_String(arr[5]),
      wordCount: dco_decode_opt_String(arr[6]),
      kind: dco_decode_opt_String(arr[7]),
    );
  }

  @protected
  RuleToc dco_decode_rule_toc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return RuleToc(
      chapterList: dco_decode_opt_String(arr[0]),
      chapterName: dco_decode_opt_String(arr[1]),
      chapterUrl: dco_decode_opt_String(arr[2]),
      isVolume: dco_decode_opt_String(arr[3]),
      preUpdateJson: dco_decode_opt_String(arr[4]),
      formatJs: dco_decode_opt_String(arr[5]),
      isVip: dco_decode_opt_String(arr[6]),
      isPay: dco_decode_opt_String(arr[7]),
      nextTocUrl: dco_decode_opt_String(arr[8]),
      updateTime: dco_decode_opt_String(arr[9]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  ReqwestError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerreqwestError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReqwestError.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ReqwestError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerreqwestError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReqwestError.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BookSource sse_decode_book_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bookSourceComment = sse_decode_opt_String(deserializer);
    var var_bookSourceGroup = sse_decode_opt_String(deserializer);
    var var_bookSourceName = sse_decode_opt_String(deserializer);
    var var_bookSourceType = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_bookSourceUrl = sse_decode_opt_String(deserializer);
    var var_customOrder = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_enabled = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_enabledCookieJar = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_enabledExplore = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_exploreUrl = sse_decode_opt_String(deserializer);
    var var_lastUpdateTime = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_respondTime = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_ruleBookInfo =
        sse_decode_opt_box_autoadd_rule_book_info(deserializer);
    var var_ruleContent = sse_decode_opt_box_autoadd_rule_content(deserializer);
    var var_ruleExplore = sse_decode_opt_box_autoadd_rule_explore(deserializer);
    var var_ruleReview = sse_decode_opt_box_autoadd_rule_review(deserializer);
    var var_ruleSearch = sse_decode_opt_box_autoadd_rule_search(deserializer);
    var var_ruleToc = sse_decode_opt_box_autoadd_rule_toc(deserializer);
    var var_searchUrl = sse_decode_opt_String(deserializer);
    var var_weight = sse_decode_opt_box_autoadd_i_64(deserializer);
    return BookSource(
        bookSourceComment: var_bookSourceComment,
        bookSourceGroup: var_bookSourceGroup,
        bookSourceName: var_bookSourceName,
        bookSourceType: var_bookSourceType,
        bookSourceUrl: var_bookSourceUrl,
        customOrder: var_customOrder,
        enabled: var_enabled,
        enabledCookieJar: var_enabledCookieJar,
        enabledExplore: var_enabledExplore,
        exploreUrl: var_exploreUrl,
        lastUpdateTime: var_lastUpdateTime,
        respondTime: var_respondTime,
        ruleBookInfo: var_ruleBookInfo,
        ruleContent: var_ruleContent,
        ruleExplore: var_ruleExplore,
        ruleReview: var_ruleReview,
        ruleSearch: var_ruleSearch,
        ruleToc: var_ruleToc,
        searchUrl: var_searchUrl,
        weight: var_weight);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  RuleBookInfo sse_decode_box_autoadd_rule_book_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_rule_book_info(deserializer));
  }

  @protected
  RuleContent sse_decode_box_autoadd_rule_content(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_rule_content(deserializer));
  }

  @protected
  RuleExplore sse_decode_box_autoadd_rule_explore(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_rule_explore(deserializer));
  }

  @protected
  RuleReview sse_decode_box_autoadd_rule_review(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_rule_review(deserializer));
  }

  @protected
  RuleSearch sse_decode_box_autoadd_rule_search(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_rule_search(deserializer));
  }

  @protected
  RuleToc sse_decode_box_autoadd_rule_toc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_rule_toc(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<BookSource> sse_decode_list_book_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BookSource>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_book_source(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RuleBookInfo? sse_decode_opt_box_autoadd_rule_book_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_rule_book_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RuleContent? sse_decode_opt_box_autoadd_rule_content(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_rule_content(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RuleExplore? sse_decode_opt_box_autoadd_rule_explore(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_rule_explore(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RuleReview? sse_decode_opt_box_autoadd_rule_review(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_rule_review(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RuleSearch? sse_decode_opt_box_autoadd_rule_search(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_rule_search(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RuleToc? sse_decode_opt_box_autoadd_rule_toc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_rule_toc(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RuleBookInfo sse_decode_rule_book_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_author = sse_decode_opt_String(deserializer);
    var var_coverUrl = sse_decode_opt_String(deserializer);
    var var_init = sse_decode_opt_String(deserializer);
    var var_intro = sse_decode_opt_String(deserializer);
    var var_kind = sse_decode_opt_String(deserializer);
    var var_lastChapter = sse_decode_opt_String(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_tocUrl = sse_decode_opt_String(deserializer);
    var var_wordCount = sse_decode_opt_String(deserializer);
    var var_downloadUrl = sse_decode_opt_String(deserializer);
    var var_canReName = sse_decode_opt_String(deserializer);
    return RuleBookInfo(
        author: var_author,
        coverUrl: var_coverUrl,
        init: var_init,
        intro: var_intro,
        kind: var_kind,
        lastChapter: var_lastChapter,
        name: var_name,
        tocUrl: var_tocUrl,
        wordCount: var_wordCount,
        downloadUrl: var_downloadUrl,
        canReName: var_canReName);
  }

  @protected
  RuleContent sse_decode_rule_content(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_content = sse_decode_opt_String(deserializer);
    var var_replaceRegex = sse_decode_opt_String(deserializer);
    var var_title = sse_decode_opt_String(deserializer);
    var var_nextContentUrl = sse_decode_opt_String(deserializer);
    var var_webJs = sse_decode_opt_String(deserializer);
    var var_sourceRegex = sse_decode_opt_String(deserializer);
    var var_imageStyle = sse_decode_opt_String(deserializer);
    var var_payAction = sse_decode_opt_String(deserializer);
    return RuleContent(
        content: var_content,
        replaceRegex: var_replaceRegex,
        title: var_title,
        nextContentUrl: var_nextContentUrl,
        webJs: var_webJs,
        sourceRegex: var_sourceRegex,
        imageStyle: var_imageStyle,
        payAction: var_payAction);
  }

  @protected
  RuleExplore sse_decode_rule_explore(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_author = sse_decode_opt_String(deserializer);
    var var_bookList = sse_decode_opt_String(deserializer);
    var var_bookUrl = sse_decode_opt_String(deserializer);
    var var_coverUrl = sse_decode_opt_String(deserializer);
    var var_lastChapter = sse_decode_opt_String(deserializer);
    var var_intro = sse_decode_opt_String(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_wordCount = sse_decode_opt_String(deserializer);
    var var_kind = sse_decode_opt_String(deserializer);
    return RuleExplore(
        author: var_author,
        bookList: var_bookList,
        bookUrl: var_bookUrl,
        coverUrl: var_coverUrl,
        lastChapter: var_lastChapter,
        intro: var_intro,
        name: var_name,
        wordCount: var_wordCount,
        kind: var_kind);
  }

  @protected
  RuleReview sse_decode_rule_review(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_reviewUrl = sse_decode_opt_String(deserializer);
    var var_avatarRule = sse_decode_opt_String(deserializer);
    var var_contentRule = sse_decode_opt_String(deserializer);
    var var_postTimeRule = sse_decode_opt_String(deserializer);
    var var_reviewQuoteUrl = sse_decode_opt_String(deserializer);
    var var_voteUpUrl = sse_decode_opt_String(deserializer);
    var var_voteDownUrl = sse_decode_opt_String(deserializer);
    var var_postReviewUrl = sse_decode_opt_String(deserializer);
    var var_postQuoteUrl = sse_decode_opt_String(deserializer);
    var var_deleteUrl = sse_decode_opt_String(deserializer);
    return RuleReview(
        reviewUrl: var_reviewUrl,
        avatarRule: var_avatarRule,
        contentRule: var_contentRule,
        postTimeRule: var_postTimeRule,
        reviewQuoteUrl: var_reviewQuoteUrl,
        voteUpUrl: var_voteUpUrl,
        voteDownUrl: var_voteDownUrl,
        postReviewUrl: var_postReviewUrl,
        postQuoteUrl: var_postQuoteUrl,
        deleteUrl: var_deleteUrl);
  }

  @protected
  RuleSearch sse_decode_rule_search(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_author = sse_decode_opt_String(deserializer);
    var var_bookList = sse_decode_opt_String(deserializer);
    var var_bookUrl = sse_decode_opt_String(deserializer);
    var var_coverUrl = sse_decode_opt_String(deserializer);
    var var_intro = sse_decode_opt_String(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_wordCount = sse_decode_opt_String(deserializer);
    var var_kind = sse_decode_opt_String(deserializer);
    return RuleSearch(
        author: var_author,
        bookList: var_bookList,
        bookUrl: var_bookUrl,
        coverUrl: var_coverUrl,
        intro: var_intro,
        name: var_name,
        wordCount: var_wordCount,
        kind: var_kind);
  }

  @protected
  RuleToc sse_decode_rule_toc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_chapterList = sse_decode_opt_String(deserializer);
    var var_chapterName = sse_decode_opt_String(deserializer);
    var var_chapterUrl = sse_decode_opt_String(deserializer);
    var var_isVolume = sse_decode_opt_String(deserializer);
    var var_preUpdateJson = sse_decode_opt_String(deserializer);
    var var_formatJs = sse_decode_opt_String(deserializer);
    var var_isVip = sse_decode_opt_String(deserializer);
    var var_isPay = sse_decode_opt_String(deserializer);
    var var_nextTocUrl = sse_decode_opt_String(deserializer);
    var var_updateTime = sse_decode_opt_String(deserializer);
    return RuleToc(
        chapterList: var_chapterList,
        chapterName: var_chapterName,
        chapterUrl: var_chapterUrl,
        isVolume: var_isVolume,
        preUpdateJson: var_preUpdateJson,
        formatJs: var_formatJs,
        isVip: var_isVip,
        isPay: var_isPay,
        nextTocUrl: var_nextTocUrl,
        updateTime: var_updateTime);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerreqwestError(
          ReqwestError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerreqwestError(
          ReqwestError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_book_source(BookSource self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.bookSourceComment, serializer);
    sse_encode_opt_String(self.bookSourceGroup, serializer);
    sse_encode_opt_String(self.bookSourceName, serializer);
    sse_encode_opt_box_autoadd_i_64(self.bookSourceType, serializer);
    sse_encode_opt_String(self.bookSourceUrl, serializer);
    sse_encode_opt_box_autoadd_i_64(self.customOrder, serializer);
    sse_encode_opt_box_autoadd_bool(self.enabled, serializer);
    sse_encode_opt_box_autoadd_bool(self.enabledCookieJar, serializer);
    sse_encode_opt_box_autoadd_bool(self.enabledExplore, serializer);
    sse_encode_opt_String(self.exploreUrl, serializer);
    sse_encode_opt_box_autoadd_i_64(self.lastUpdateTime, serializer);
    sse_encode_opt_box_autoadd_i_64(self.respondTime, serializer);
    sse_encode_opt_box_autoadd_rule_book_info(self.ruleBookInfo, serializer);
    sse_encode_opt_box_autoadd_rule_content(self.ruleContent, serializer);
    sse_encode_opt_box_autoadd_rule_explore(self.ruleExplore, serializer);
    sse_encode_opt_box_autoadd_rule_review(self.ruleReview, serializer);
    sse_encode_opt_box_autoadd_rule_search(self.ruleSearch, serializer);
    sse_encode_opt_box_autoadd_rule_toc(self.ruleToc, serializer);
    sse_encode_opt_String(self.searchUrl, serializer);
    sse_encode_opt_box_autoadd_i_64(self.weight, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_rule_book_info(
      RuleBookInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rule_book_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_rule_content(
      RuleContent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rule_content(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_rule_explore(
      RuleExplore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rule_explore(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_rule_review(
      RuleReview self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rule_review(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_rule_search(
      RuleSearch self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rule_search(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_rule_toc(RuleToc self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rule_toc(self, serializer);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_book_source(
      List<BookSource> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_book_source(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_rule_book_info(
      RuleBookInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_rule_book_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_rule_content(
      RuleContent? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_rule_content(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_rule_explore(
      RuleExplore? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_rule_explore(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_rule_review(
      RuleReview? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_rule_review(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_rule_search(
      RuleSearch? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_rule_search(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_rule_toc(
      RuleToc? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_rule_toc(self, serializer);
    }
  }

  @protected
  void sse_encode_rule_book_info(RuleBookInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.author, serializer);
    sse_encode_opt_String(self.coverUrl, serializer);
    sse_encode_opt_String(self.init, serializer);
    sse_encode_opt_String(self.intro, serializer);
    sse_encode_opt_String(self.kind, serializer);
    sse_encode_opt_String(self.lastChapter, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_String(self.tocUrl, serializer);
    sse_encode_opt_String(self.wordCount, serializer);
    sse_encode_opt_String(self.downloadUrl, serializer);
    sse_encode_opt_String(self.canReName, serializer);
  }

  @protected
  void sse_encode_rule_content(RuleContent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.content, serializer);
    sse_encode_opt_String(self.replaceRegex, serializer);
    sse_encode_opt_String(self.title, serializer);
    sse_encode_opt_String(self.nextContentUrl, serializer);
    sse_encode_opt_String(self.webJs, serializer);
    sse_encode_opt_String(self.sourceRegex, serializer);
    sse_encode_opt_String(self.imageStyle, serializer);
    sse_encode_opt_String(self.payAction, serializer);
  }

  @protected
  void sse_encode_rule_explore(RuleExplore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.author, serializer);
    sse_encode_opt_String(self.bookList, serializer);
    sse_encode_opt_String(self.bookUrl, serializer);
    sse_encode_opt_String(self.coverUrl, serializer);
    sse_encode_opt_String(self.lastChapter, serializer);
    sse_encode_opt_String(self.intro, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_String(self.wordCount, serializer);
    sse_encode_opt_String(self.kind, serializer);
  }

  @protected
  void sse_encode_rule_review(RuleReview self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.reviewUrl, serializer);
    sse_encode_opt_String(self.avatarRule, serializer);
    sse_encode_opt_String(self.contentRule, serializer);
    sse_encode_opt_String(self.postTimeRule, serializer);
    sse_encode_opt_String(self.reviewQuoteUrl, serializer);
    sse_encode_opt_String(self.voteUpUrl, serializer);
    sse_encode_opt_String(self.voteDownUrl, serializer);
    sse_encode_opt_String(self.postReviewUrl, serializer);
    sse_encode_opt_String(self.postQuoteUrl, serializer);
    sse_encode_opt_String(self.deleteUrl, serializer);
  }

  @protected
  void sse_encode_rule_search(RuleSearch self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.author, serializer);
    sse_encode_opt_String(self.bookList, serializer);
    sse_encode_opt_String(self.bookUrl, serializer);
    sse_encode_opt_String(self.coverUrl, serializer);
    sse_encode_opt_String(self.intro, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_String(self.wordCount, serializer);
    sse_encode_opt_String(self.kind, serializer);
  }

  @protected
  void sse_encode_rule_toc(RuleToc self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.chapterList, serializer);
    sse_encode_opt_String(self.chapterName, serializer);
    sse_encode_opt_String(self.chapterUrl, serializer);
    sse_encode_opt_String(self.isVolume, serializer);
    sse_encode_opt_String(self.preUpdateJson, serializer);
    sse_encode_opt_String(self.formatJs, serializer);
    sse_encode_opt_String(self.isVip, serializer);
    sse_encode_opt_String(self.isPay, serializer);
    sse_encode_opt_String(self.nextTocUrl, serializer);
    sse_encode_opt_String(self.updateTime, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
